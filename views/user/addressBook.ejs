<% layout('layout') -%>

<header class="about-header">
	<% include ./../partials/cart %>
	<div class="fullscreen-video-wrap banner">
		<img src="../img/Banner Img for abt us.jpg">
		<div class="banner-overlay">
			<h1>Edit Details</h1>
		</div>
	</div>
</div>

	<div class="profile-container">
		<div class="sidebar">
			<h2>My Account</h2>
			<ul>
				<a href="./profile"><li>Account Dashboard</li></a>
				<a href="./addressBook"><li>Account Information</li></a>
				<a href="./orders"><li>My Orders</li></a>
			</ul>
		</div>
		<div class="info-window">
			<h2>Add New Address</h2>
			<p class="proile-label">Contact Information</p>
			<hr>
			<form method="POST" id="addAddress" action="/account/addressBook">
				<div class="form-section">
					<label for="first-name">Picker's Name</label>
					<input type="text" name="pickerName" placeholder="Enter Picker's Name" required>
				</div>
				<!-- <div class="form-section">
					<label for="last-name">Last Name</label>
					<input type="text" name="last-name" placeholder="Snow">
				</div> -->
				<div class="form-section">
					<label for="phone">Mobile No </label>
					<input type="text" name="phone" placeholder="Enter Picker's No." pattern="[789][0-9]{9}"  required >
				</div>
			<p class="proile-label">Address</p>
			<hr>
			<div class="pac-card" id="pac-card">
				<div>
					<div id="title">
						Autocomplete search
					</div>
					<div id="type-selector" class="pac-controls">
						<input type="radio" name="type" id="changetype-all" checked="checked">
						<label for="changetype-all">All</label>

						<input type="radio" name="type" id="changetype-establishment">
						<label for="changetype-establishment">Establishments</label>

						<input type="radio" name="type" id="changetype-address">
						<label for="changetype-address">Addresses</label>

						<input type="radio" name="type" id="changetype-geocode">
						<label for="changetype-geocode">Geocodes</label>
					</div>
					<div id="strict-bounds-selector" class="pac-controls">
						<input type="checkbox" id="use-strict-bounds" value="">
						<label for="use-strict-bounds">Strict Bounds</label>
					</div>
				</div>
			</div>
			<div id="map"></div>
			<div id="infowindow-content">
				<!-- <img src="" width="8" height="8" id="place-icon"> -->
				<!-- <span id="place-name"  class="title"></span><br> -->
				<span id="place-address"></span>
			</div>
				<div class="form-section">
					<label for="address">Enter Your Location *</label>
					<input type="text" id="pac-input" name="location" placeholder="Enter Your Location" required>
				</div>
				<div class="form-section">
					<label for="city">House and Street No.</label>
					<input type="text" name="street" placeholder="House And Street No." required>
				</div>
				<!-- <div class="form-section">
					<label for="area">Area</label>
					<input type="number" name="area" placeholder="Area">
				</div> -->
				<!-- <div class="form-section">
					<label for="state">State</label>
					<input type="number" name="state" placeholder="State">
				</div>
				<div class="form-section">
					<label for="zip">Zip/Postal Code</label>
					<input type="number" name="zip" placeholder="Zip/Postal Code">
				</div> -->
				<button class="profile-save-btn" type="submit">Save Address</button>

			</form>
			<h2>Saved Addresses</h2>
			<hr/>
			<div class="form-section" style="grid-template-columns: 1fr;">
			<% user.addresses.forEach(function(address){ %>

		<textarea   rows="10" cols="50" name="comment[text]" id="comment_text" class="ui-autocomplete-input extarea" autocomplete="off" role="textbox" aria-autocomplete="list" aria-haspopup="true" disabled>

		Picker's Name: <%=address.pickerName %>

		Address: <%=address.street %>, <%=address.location %>

	  Picker's Phone: <%=address.phone %>
		</textarea>
	<% }); %>
		</div>
		</div>




	</div>


	<script>
	document.getElementById('addAddress').onkeypress = checkEnter;

function checkEnter(e){
 e = e || event;
 var txtArea = /textarea/i.test((e.target || e.srcElement).tagName);
 return txtArea || (e.keyCode || e.which || e.charCode || 0) !== 13;
}


	function initMap() {
		map = new google.maps.Map(document.getElementById('map'), {
			center: {lat: 28.4595, lng: 77.0266},
			zoom: 12
		});
		infoWindow = new google.maps.InfoWindow;

var geocoder = geocoder = new google.maps.Geocoder();
		// Try HTML5 geolocation.
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(function(position) {
				var pos = {
					lat: position.coords.latitude,
					lng: position.coords.longitude
				};

				infoWindow.setPosition(pos);
				infoWindow.setContent('Location Found.');
				infoWindow.open(map);
				map.setCenter(pos);
			}, function() {
				handleLocationError(true, infoWindow, map.getCenter());
			});
		} else {
			// Browser doesn't support Geolocation
			handleLocationError(false, infoWindow, map.getCenter());
		}
		var card = document.getElementById('pac-card');
		var input = document.getElementById('pac-input');
		var types = document.getElementById('type-selector');
		var strictBounds = document.getElementById('strict-bounds-selector');

		map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

		var autocomplete = new google.maps.places.Autocomplete(input);

		// Bind the map's bounds (viewport) property to the autocomplete object,
		// so that the autocomplete requests use the current map bounds for the
		// bounds option in the request.
		autocomplete.bindTo('bounds', map);

		var infowindow = new google.maps.InfoWindow();
		var infowindowContent = document.getElementById('infowindow-content');
		infowindow.setContent(infowindowContent);
		var marker = new google.maps.Marker({
			map: map,
			anchorPoint: new google.maps.Point(0, -29),
			draggable: true,
		});

		autocomplete.addListener('place_changed', function() {
			infowindow.close();
			marker.setVisible(false);
			var place = autocomplete.getPlace();
			if (!place.geometry) {
				// User entered the name of a Place that was not suggested and
				// pressed the Enter key, or the Place Details request failed.
				window.alert("No details available for input: '" + place.name + "'");
				return;
			}

			// If the place has a geometry, then present it on a map.
			if (place.geometry.viewport) {
				map.fitBounds(place.geometry.viewport);
			} else {
				map.setCenter(place.geometry.location);
				map.setZoom(17);  // Why 17? Because it looks good.
			}
			marker.setPosition(place.geometry.location);
			marker.setVisible(true);

			var address = '';
			if (place.address_components) {
				address = [
					(place.address_components[0] && place.address_components[0].short_name || ''),
					(place.address_components[1] && place.address_components[1].short_name || ''),
					(place.address_components[2] && place.address_components[2].short_name || '')
				].join(' ');
			}

			// infowindowContent.children['place-icon'].src = place.icon;
			// infowindowContent.children['place-name'].textContent = place.name;
			infowindowContent.children['place-address'].textContent = address;
			infowindow.open(map, marker);
		});

		// Sets a listener on a radio button to change the filter type on Places
		// Autocomplete.
		function setupClickListener(id, types) {
			var radioButton = document.getElementById(id);
			radioButton.addEventListener('click', function() {
				autocomplete.setTypes(types);
			});
		}
		function geocodePosition(pos) {
			geocoder.geocode({
				latLng: pos
			}, function(responses) {
				if (responses && responses.length > 0) {
								document.getElementById('pac-input').value = responses[0].formatted_address;
						// document.getElementById('faddress').value = responses[0].formatted_address;
						document.getElementById("place-address").innerHTML = responses[0].formatted_address;
				} else {
					updateMarkerAddress('Cannot determine address at this location.');
				}
			});
		}
		function updateMarkerStatus(str) {
			console.log(str);
			document.getElementById('markerStatus').innerHTML = str;
		}

		function updateMarkerPosition(latLng) {
			document.getElementById('info').innerHTML = [
				latLng.lat(),
				latLng.lng()
			].join(', ');
		}

		function markerCoords(markerobject){
				google.maps.event.addListener(markerobject, 'dragend', function(evt){
						infoWindow.setOptions({
								content: '<p>Marker dropped: Current Lat: ' + evt.latLng.lat().toFixed(3) + ' Current Lng: ' + evt.latLng.lng().toFixed(3) + '</p>'
						});
						infoWindow.open(map, markerobject);
				});

				google.maps.event.addListener(markerobject, 'drag', function(evt){
						console.log("marker is being dragged");
				});
		}

		google.maps.event.addListener(marker, 'dragend', function (event) {
			// console.log(this.getPosition());
			// document.getElementById("latbox").value = this.getPosition().lat();
			// document.getElementById("lngbox").value = this.getPosition().lng();
			// document.getElementById('faddress').value = this.getPosition();
			geocodePosition(marker.getPosition());
	});
		setupClickListener('changetype-all', []);
		setupClickListener('changetype-address', ['address']);
		setupClickListener('changetype-establishment', ['establishment']);
		setupClickListener('changetype-geocode', ['geocode']);

		document.getElementById('use-strict-bounds')
				.addEventListener('click', function() {
					console.log('Checkbox clicked! New state=' + this.checked);
					autocomplete.setOptions({strictBounds: this.checked});
				});
	}
	</script>

	<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB-wTYp5ZfepUgW0b7n9z_JvBlwhO4ImZo&libraries=places&callback=initMap"
	type="text/javascript"></script>
